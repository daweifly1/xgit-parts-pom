<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.com.xgit.parts.auth.account.dao.mapper.sys.SysRoleAuthMapper">
    <resultMap id="BaseResultMap" type="cn.com.xgit.parts.auth.account.dao.entity.sys.SysRoleAuthDO">
            <result column="ID" property="id" jdbcType="INTEGER"/>
            <result column="ROLE_ID" property="roleId" jdbcType="VARCHAR"/>
            <result column="AUTH_ID" property="authId" jdbcType="INTEGER"/>
            <result column="STATUS" property="status" jdbcType="INTEGER"/>
    </resultMap>


    <sql id="Base_Column_List">
        ID,ROLE_ID,AUTH_ID,STATUS
    </sql>

    <sql id="cond">
        <where>
            <if test="id != null">
                and ID = #{id,jdbcType=VARCHAR}
            </if>
            <if test="roleId != null and roleId != ''">
                and  ROLE_ID =#{roleId,jdbcType=VARCHAR}
            </if>
            <if test="authId != null">
                and  AUTH_ID =#{authId,jdbcType=INTEGER}
            </if>
            <if test="status != null">
                and  STATUS =#{status,jdbcType=INTEGER}
            </if>
            <if test="roleIdList != null and roleIdList.size()>0 ">
                and  ROLE_ID in
                <foreach collection="roleIdList" item="roleId" separator="," open="(" close=")">
                    #{roleId,jdbcType=VARCHAR}
                </foreach>
            </if>
        </where>
    </sql>

    <select id="list" parameterType="cn.com.xgit.parts.auth.module.menu.vo.SysRoleAuthVO" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from SYS_ROLE_AUTH
        <include refid="cond"/>
    </select>

    <select id="queryList" parameterType="cn.com.xgit.parts.auth.module.menu.vo.SysRoleAuthVO" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from SYS_ROLE_AUTH
        <include refid="cond"/>
    </select>

    <select id="queryListByIds" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from SYS_ROLE_AUTH
        where ID in
        <foreach collection="ids" item="id" open="(" separator=","  close=")">
         #{id}
        </foreach>
    </select>


    <delete id="deleteByPrimaryKeySelective" parameterType="java.lang.String">
        delete from SYS_ROLE_AUTH where ID = #{id,jdbcType=VARCHAR}
    </delete>

    <delete id="deleteByRole" parameterType="java.lang.String">
        delete from SYS_ROLE_AUTH where ROLE_ID = #{roleId,jdbcType=VARCHAR}
    </delete>


    <insert id="insert" parameterType="cn.com.xgit.parts.auth.account.dao.entity.sys.SysRoleAuthDO">
        insert into SYS_ROLE_AUTH (
        ID,ROLE_ID,AUTH_ID,STATUS
        )
        values (
         #{id,jdbcType=INTEGER},#{roleId,jdbcType=VARCHAR},#{authId,jdbcType=INTEGER},#{status,jdbcType=INTEGER}
        )
    </insert>

    <insert id="batchInsert" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        insert into SYS_ROLE_AUTH (
        ROLE_ID,AUTH_ID,STATUS
        )
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (
            #{item.roleId,jdbcType=VARCHAR},#{item.authId,jdbcType=INTEGER},#{item.status,jdbcType=INTEGER}
            )
        </foreach>
    </insert>

    <update id="merge" parameterType="cn.com.xgit.parts.auth.account.dao.entity.sys.SysRoleAuthDO">
        merge into SYS_ROLE_AUTH t1
        using (select #{id,jdbcType=VARCHAR} as ID from dual)tab_
        ON (t1.ID=tab_.ID)
        WHEN MATCHED THEN
        update
        <set>
            <if test="roleId != null">
                ROLE_ID =#{roleId,jdbcType=VARCHAR},
            </if>
            <if test="authId != null">
                AUTH_ID =#{authId,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                STATUS =#{status,jdbcType=INTEGER},
            </if>
        </set>
        WHEN NOT MATCHED THEN
        insert  (
        ID,ROLE_ID,AUTH_ID,STATUS
        )
        values (
        #{id,jdbcType=INTEGER},#{roleId,jdbcType=VARCHAR},#{authId,jdbcType=INTEGER},#{status,jdbcType=INTEGER}
        )
    </update>
    <!--todo 待验证-->
    <update id="mergeMsql" parameterType="cn.com.xgit.parts.auth.account.dao.entity.sys.SysRoleAuthDO">
        insert  (
        ID,ROLE_ID,AUTH_ID,STATUS
        )
        values (
        #{id,jdbcType=INTEGER},#{roleId,jdbcType=VARCHAR},#{authId,jdbcType=INTEGER},#{status,jdbcType=INTEGER}
        )
        ON duplicate KEY UPDATE
        <set>
            <if test="roleId != null">
                ROLE_ID =#{roleId,jdbcType=VARCHAR},
            </if>
            <if test="authId != null">
                AUTH_ID =#{authId,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                STATUS =#{status,jdbcType=INTEGER},
            </if>
        </set>
    </update>

    <update id="updateByPrimaryKeySelective" parameterType="cn.com.xgit.parts.auth.account.dao.entity.sys.SysRoleAuthDO">
        update SYS_ROLE_AUTH
        <set>
            <if test="roleId != null">
                ROLE_ID =#{roleId,jdbcType=VARCHAR},
            </if>
            <if test="authId != null">
                AUTH_ID =#{authId,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                STATUS =#{status,jdbcType=INTEGER},
            </if>
        </set>
        where ID =  #{id,jdbcType=VARCHAR}
    </update>
</mapper>
